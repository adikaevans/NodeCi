
app.get('/api/blogs', requireLogin, async (req, res) => {
    
    const redis = require('redis');
    const redisUrl = 'redis://127.0.0.1:6379';
    const client = redis.createClient(redisUrl);    
    const util = require('util');//library containing utility functions e.g Promisify.
    client.get = util.promisify(client.get);
    /* 'Promisify' takes any function that takes a callback as the last argument and make it Return a Promise.*/

  //Do we have any cached data in redis relating to this query? 

  /* const cachedBlogs = client.get(req.user.id, () => {}); instead of the callback, we need   it to return a Promise. See below */
    const cachedBlogs = await client.get(req.user.id);

   // If Yes, then respond to the request right away and Return.
    if (cachedBlogs) {
      console.log('SERVING FROM CACHE');
      return res.send(JSON.parse(cachedBlogs)); /*JSON.parse converts stringifyed cachedBlogs to regular javascript array full of Objects*/
    }

  //If No, we need to respond from our database and update our cache(redis) to store the data.
    const blogs = await Blog.find({ _user: req.user.id });
      console.log('SERVING FROM MONGODB');
      res.send(blogs);

    client.set(req.user.id, JSON.stringify(blogs)); /* Whenever we store Objects inside of 'Redis', we have to stringify them into JSON*/

  });
=> Image Upload Issues:
        - Where do images get physically stored? E.g mongoDB, HDD attached to server, External data store.
        - How do images get to the place they should be stored?
        - How do we relate images to a particular blog post?

* In this project, we will store our images in an external data storage e.g Amazon S3, Azure File Storage, Goole cloud storage. Here, we use Amazon S3.

=> We want to first setup some rules to govern users' ability to upload images;
    - Only signed-in users should be able to upload. Restrict at API level not at react level for security
    - The uploaded image should be tied to the blog post being created.
    - Only allow image files(e.g .jpg, .png, etc) to be uploaded.

* The upload process is like a two-hop approach. From the browser, we upload the image to our Express API(file is streamed into a temporary storage) then Express API uploads the image to Amazon S3(external storage).
-> This approach is however not scalable coz it will cause our server(Express API) to do more work thus increasing our expenditure on more servers. 

-> As an alternative to above problem, we use a below flow that will allow us to upload images directly from our browser to Amazon S3;

CLIENT                                   SERVER(EXPRESS API)                     AWS(AMAZON) S3

Client tells Server it needs to upload---> Server asks S3 for a presigned-------->      
a file to S3. It includes file name and     URL
file type.

                                     <----Server sends URL to react client  <------ S3 gives Server  
                                                                                     a presigned URL(Works ONLY for a file matching the original file name).
React client uploads image file directly to S3 Server------------------------------>

React client tells Server the upload------>
was successful. Server saves URL of
that new image with the blog post.

=> We look at some of the security issues resolved by this presigned URL approach;

            Feature:                                               Security Issue Solved:
* URL can only be used for a single file   ---->   Users cannot spam our S3 bucket with many files.
  upload.
* URL encodes the file name and type of    ---->   User cannot request a URL for one file then upload a  
  file.                                              different file. 
* URL can expired                          ---->   Prevents some exploits like a malicious user trying to 
                                                     get a URL from another user.
* URL is generated by a secure request     ---->   Users cannot fake their own upload URL.
  between our server and AWS.
* URL only works for the S3 bucket it is   ---->   User cannot use the URL for some other bucket that 
  creaated for.                                      belongs to us.  

=> To actually upload an image in our project, we started by adding an image selector to 'BlogFormReview.js' react file;
        <h5>Add an Image Mr.Adika</h5>
        <input type="file" accept="image/*" /> 

* When we add a new blog, we are also redirected to upload an image file.       

=> When we try to submit this blog post we want to get a Presigned URL from the Express API at the same time. Much of the code that we will need is tied to the React side.  
* We added a variable in 'BlogFormReview.js' that will store the image file that the user selects from the image selector above. See '/src/components/BlogFormReview.js' file.

* We want to get our Presigned URL when our component reaches the backend(Express API) and tries to create a new blog post. We want to be sure that whenever a user is about to click 'SAVE BLOG',we make a request for the presigned URL.
So we navigate to the click-event(onSubmit) inside the component(BlogFormReview).
